															Stack

Stack-
A stack is a linear data structure that follows the LIFO (Last In, First Out) principle.
This means that the last element added is the first one to be removed—just like a stack of plates.




Operations of Stack
Push → Insert an element at the top.

Pop → Remove the top element.

Peek → View the top element without removing it.

Peep → View any specific element from the top without removing it.

Display → Show all elements of the stack.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Push- Push means inserting an element at the top of the stack.


Let's understand with the example then we will move to the algorithm.

Stack: Empty
|    |
|    |
|    |
|    |
|____|
top = -1



Push(10)
Stack: 
| 10 | ← top
|____|

Push(20)
Stack:
| 20 | ← top
| 10 |
|____|

Push(30)
Stack:
| 30 | ← top
| 20 |
| 10 |
|____|



Pseudocode:

Algorithm push(value){
	if(top == max - 1){
	print("Overflow");
	return;
	}
	else{
	top++;
	Stack[top] = value
	}
}






Algorithm of Push:

Algorithm Push(Stack, top, max, item){
	if(top == max - 1){
		print("Stack Overflow");	
	}

	else{
		top++;
		Stack[top] = item;
	}
}



Explanation:

Step 1: Checks if the stack is full (top == max-1 → Because array index starts from 0).

Step 2: If not full → Increase top by 1 and insert the item at Stack[top].

Stack Overflow: When there is no space left to insert.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Pop Operation
Pop means removing an element from the top of the stack.

Example:

Initial Stack:

| 30 | ← top
| 20 |
| 10 |
|____|
top = 2



Pop() → Removes 30
| 20 | ← top
| 10 |
|____|
top = 1



| 10 | ← top
|____|
top = 0


|    |
|____|
top = -1 → Stack is empty
If you try to pop again → Underflow condition (nothing to remove).


Pseudocode:

Algorithm pop() {
    if (top == -1) {
        print("Underflow");
        return;
    }
    else {
        print(Stack[top]);
        top--;
    }
}





Algorithm:

Algorithm Pop(Stack, top)
{
    if (top == -1) then
        Print "Underflow"
        return
    else
        Print Stack[top]
        top ← top - 1
}

Explanation 

Algorithm Pop(Stack, top): Name of the algorithm and parameters.

if (top == -1): Checks if the stack is empty.

Underflow: Stack is empty, so nothing to pop.

Else: If stack is not empty:

Prints the top element (being removed).

Decreases top by 1 to remove the element.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Peek Operation
Peek means viewing the top element of the stack without removing it.
It helps to check what is on the top of the stack.

Example:

Stack:

| 30 | ← top
| 20 |
| 10 |
|____|
top = 2

Peek() → Shows 30 but does not remove it.



Pseudocode:

Algorithm Peek()
{
    if (top == -1) then
        print "Stack is Empty"
        return
    else
        print Stack[top]
}




Algorithm:
Algorithm Peek(Stack, top)
{
    if (top == -1) then
        Print "Stack is Empty"
        return
    else
        Print Stack[top]
}


Explanation:
Step 1: Checks if the stack is empty (top == -1).
Step 2: If empty → Prints "Stack is Empty" message.
Step 3: If not empty → Prints the top element → Stack[top].
Note: The element is not removed, just viewed.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




